===============================
Tests for add_integer()
===============================

Numbers
=======

``add_integer()`` returns the sum of its arguments. It should only
work with integers and floats

::

    >>> add_integer = __import__('0-add_integer').add_integer

    >>> add_integer(2, 3)
    5

Test one argument, with the second element been 98 by default:

    >>> add_integer(2)
    100

Test positive, negative big integers:

    >>> add_integer(1000000, -9999999999)
    -9998999999

Test really big integers:

    >>> add_integer(1e30000, 1)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(1, 1e30000)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer


It also works with floating-point values. But the return must
be an integer

::

    >>> add_integer(2.0, 3)
    5

    >>> add_integer(2, 3.0)
    5

    >>> add_integer(2.0, 3.0)
    5

Non-Numbers
===========

``add_integer()`` doesn't work with any other type of arguments
string, a list, tuple, or an imaginari number (j).

::

    >>> add_integer('a', 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(2, "test")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer("TDD", "test")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(2, [2 , 3])
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer((2, 3), 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(None, 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(2, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(float('nan'), 3)
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
